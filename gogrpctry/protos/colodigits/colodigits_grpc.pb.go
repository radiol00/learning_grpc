// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package colodigits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColodigitServiceClient is the client API for ColodigitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColodigitServiceClient interface {
	AddColodigit(ctx context.Context, in *Colodigit, opts ...grpc.CallOption) (*Colodigit, error)
	DeleteColodigit(ctx context.Context, in *ColodigitID, opts ...grpc.CallOption) (*NoParamIO, error)
	ModifyColodigit(ctx context.Context, in *Colodigit, opts ...grpc.CallOption) (*NoParamIO, error)
	GetColodigits(ctx context.Context, in *NoParamIO, opts ...grpc.CallOption) (ColodigitService_GetColodigitsClient, error)
}

type colodigitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColodigitServiceClient(cc grpc.ClientConnInterface) ColodigitServiceClient {
	return &colodigitServiceClient{cc}
}

func (c *colodigitServiceClient) AddColodigit(ctx context.Context, in *Colodigit, opts ...grpc.CallOption) (*Colodigit, error) {
	out := new(Colodigit)
	err := c.cc.Invoke(ctx, "/ColodigitService/AddColodigit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colodigitServiceClient) DeleteColodigit(ctx context.Context, in *ColodigitID, opts ...grpc.CallOption) (*NoParamIO, error) {
	out := new(NoParamIO)
	err := c.cc.Invoke(ctx, "/ColodigitService/DeleteColodigit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colodigitServiceClient) ModifyColodigit(ctx context.Context, in *Colodigit, opts ...grpc.CallOption) (*NoParamIO, error) {
	out := new(NoParamIO)
	err := c.cc.Invoke(ctx, "/ColodigitService/ModifyColodigit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colodigitServiceClient) GetColodigits(ctx context.Context, in *NoParamIO, opts ...grpc.CallOption) (ColodigitService_GetColodigitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ColodigitService_ServiceDesc.Streams[0], "/ColodigitService/GetColodigits", opts...)
	if err != nil {
		return nil, err
	}
	x := &colodigitServiceGetColodigitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ColodigitService_GetColodigitsClient interface {
	Recv() (*Colodigit, error)
	grpc.ClientStream
}

type colodigitServiceGetColodigitsClient struct {
	grpc.ClientStream
}

func (x *colodigitServiceGetColodigitsClient) Recv() (*Colodigit, error) {
	m := new(Colodigit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ColodigitServiceServer is the server API for ColodigitService service.
// All implementations must embed UnimplementedColodigitServiceServer
// for forward compatibility
type ColodigitServiceServer interface {
	AddColodigit(context.Context, *Colodigit) (*Colodigit, error)
	DeleteColodigit(context.Context, *ColodigitID) (*NoParamIO, error)
	ModifyColodigit(context.Context, *Colodigit) (*NoParamIO, error)
	GetColodigits(*NoParamIO, ColodigitService_GetColodigitsServer) error
	mustEmbedUnimplementedColodigitServiceServer()
}

// UnimplementedColodigitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedColodigitServiceServer struct {
}

func (UnimplementedColodigitServiceServer) AddColodigit(context.Context, *Colodigit) (*Colodigit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddColodigit not implemented")
}
func (UnimplementedColodigitServiceServer) DeleteColodigit(context.Context, *ColodigitID) (*NoParamIO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColodigit not implemented")
}
func (UnimplementedColodigitServiceServer) ModifyColodigit(context.Context, *Colodigit) (*NoParamIO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyColodigit not implemented")
}
func (UnimplementedColodigitServiceServer) GetColodigits(*NoParamIO, ColodigitService_GetColodigitsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetColodigits not implemented")
}
func (UnimplementedColodigitServiceServer) mustEmbedUnimplementedColodigitServiceServer() {}

// UnsafeColodigitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColodigitServiceServer will
// result in compilation errors.
type UnsafeColodigitServiceServer interface {
	mustEmbedUnimplementedColodigitServiceServer()
}

func RegisterColodigitServiceServer(s grpc.ServiceRegistrar, srv ColodigitServiceServer) {
	s.RegisterService(&ColodigitService_ServiceDesc, srv)
}

func _ColodigitService_AddColodigit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Colodigit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColodigitServiceServer).AddColodigit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColodigitService/AddColodigit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColodigitServiceServer).AddColodigit(ctx, req.(*Colodigit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColodigitService_DeleteColodigit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColodigitID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColodigitServiceServer).DeleteColodigit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColodigitService/DeleteColodigit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColodigitServiceServer).DeleteColodigit(ctx, req.(*ColodigitID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColodigitService_ModifyColodigit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Colodigit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColodigitServiceServer).ModifyColodigit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColodigitService/ModifyColodigit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColodigitServiceServer).ModifyColodigit(ctx, req.(*Colodigit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColodigitService_GetColodigits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParamIO)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ColodigitServiceServer).GetColodigits(m, &colodigitServiceGetColodigitsServer{stream})
}

type ColodigitService_GetColodigitsServer interface {
	Send(*Colodigit) error
	grpc.ServerStream
}

type colodigitServiceGetColodigitsServer struct {
	grpc.ServerStream
}

func (x *colodigitServiceGetColodigitsServer) Send(m *Colodigit) error {
	return x.ServerStream.SendMsg(m)
}

// ColodigitService_ServiceDesc is the grpc.ServiceDesc for ColodigitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColodigitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ColodigitService",
	HandlerType: (*ColodigitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddColodigit",
			Handler:    _ColodigitService_AddColodigit_Handler,
		},
		{
			MethodName: "DeleteColodigit",
			Handler:    _ColodigitService_DeleteColodigit_Handler,
		},
		{
			MethodName: "ModifyColodigit",
			Handler:    _ColodigitService_ModifyColodigit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetColodigits",
			Handler:       _ColodigitService_GetColodigits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "colodigits.proto",
}
